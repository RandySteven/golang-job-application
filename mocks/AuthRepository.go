// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "job-application/entity/models"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *AuthRepository) GetByEmail(ctx context.Context, email string) (*models.Auth, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.Auth
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Auth); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAuth provides a mock function with given fields: ctx, userId
func (_m *AuthRepository) GetUserAuth(ctx context.Context, userId uint) (*models.Auth, error) {
	ret := _m.Called(ctx, userId)

	var r0 *models.Auth
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Auth); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, auth
func (_m *AuthRepository) Save(ctx context.Context, auth *models.Auth) (*models.Auth, error) {
	ret := _m.Called(ctx, auth)

	var r0 *models.Auth
	if rf, ok := ret.Get(0).(func(context.Context, *models.Auth) *models.Auth); ok {
		r0 = rf(ctx, auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Auth) error); ok {
		r1 = rf(ctx, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthRepository(t mockConstructorTestingTNewAuthRepository) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
