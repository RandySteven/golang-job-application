// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "job-application/entity/models"
)

// ApplicationRepository is an autogenerated mock type for the ApplicationRepository type
type ApplicationRepository struct {
	mock.Mock
}

// GetApplicationById provides a mock function with given fields: ctx, id
func (_m *ApplicationRepository) GetApplicationById(ctx context.Context, id uint) (*models.Application, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Application
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Application); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationByUserIdAndJobId provides a mock function with given fields: ctx, userId, jobId
func (_m *ApplicationRepository) GetApplicationByUserIdAndJobId(ctx context.Context, userId uint, jobId uint) (*models.Application, error) {
	ret := _m.Called(ctx, userId, jobId)

	var r0 *models.Application
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) *models.Application); ok {
		r0 = rf(ctx, userId, jobId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, uint) error); ok {
		r1 = rf(ctx, userId, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, application
func (_m *ApplicationRepository) Save(ctx context.Context, application *models.Application) (*models.Application, error) {
	ret := _m.Called(ctx, application)

	var r0 *models.Application
	if rf, ok := ret.Get(0).(func(context.Context, *models.Application) *models.Application); ok {
		r0 = rf(ctx, application)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Application)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Application) error); ok {
		r1 = rf(ctx, application)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApplicationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplicationRepository creates a new instance of ApplicationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplicationRepository(t mockConstructorTestingTNewApplicationRepository) *ApplicationRepository {
	mock := &ApplicationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
