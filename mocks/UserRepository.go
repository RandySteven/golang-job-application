// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "job-application/entity/models"

	payload "job-application/entity/payload"

	query "job-application/query"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, clauses
func (_m *UserRepository) Find(ctx context.Context, clauses []query.WhereClause) ([]models.User, error) {
	ret := _m.Called(ctx, clauses)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context, []query.WhereClause) []models.User); ok {
		r0 = rf(ctx, clauses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []query.WhereClause) error); ok {
		r1 = rf(ctx, clauses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegistertUser provides a mock function with given fields: ctx, request
func (_m *UserRepository) RegistertUser(ctx context.Context, request *payload.UserRequest) (*models.User, error) {
	ret := _m.Called(ctx, request)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *payload.UserRequest) *models.User); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *payload.UserRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, user
func (_m *UserRepository) Save(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserById provides a mock function with given fields: ctx, id, user
func (_m *UserRepository) UpdateUserById(ctx context.Context, id int, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, id, user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.User) *models.User); ok {
		r0 = rf(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *models.User) error); ok {
		r1 = rf(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
