syntax = "proto3";

option go_package = "./proto";

package job_application;

message UserRequest {
    string name  = 1;
    string birthdate = 2;
    string email = 3;
    string password = 4;
}

message UserLoginRequest {
    string email = 1;
    string password = 2;
}

message JobRequest {
    string name  = 1;
    uint32 quota = 2;
    string expiry_date = 3;
    uint32 job_poster_id = 4;
}

message IdRequest {
    uint32 id = 1;
}

message WhereClause {
    string field = 1;
    string value = 2;
    string condition = 3;
}

message WhereClauses {
    repeated WhereClause clauses = 1;
}

message LoginResponse {
    string token = 1;
}

message JobResponse {
    uint32 id = 1;
    string name = 2;
    uint32 quota = 3;
    string expiry_date = 4;
    uint32 job_poster_id = 5;
}

message ApplicationRequest {
    uint32 user_id = 1;
    uint32 job_id = 2;
}

message UserProfile {
    string name = 1;
    string email = 2;
    string birthday = 3;
}

message UserDetail {
    string name = 1;
    string email = 2;
}

message AllJobResponses {
    string message = 1;
    repeated JobResponse responses = 2;
}

message ApplicationResponse {
    uint32 id = 1;
    uint32 user_id = 2;
    uint32 job_id = 3;
    string status = 4;
    string applied_at = 5;
    string created_at = 6;
    string updated_at = 7;
    string deleted_at = 8;
}

message AllApplicationResponses {
    string message = 1;
    repeated ApplicationResponse responses = 2;
}

service UserService {
    rpc RegisterUser(UserRequest) returns (UserProfile);
    rpc LoginUser(UserLoginRequest) returns (LoginResponse);
}

service JobService {
    rpc CreateJob(JobRequest) returns (JobResponse);
    rpc FindAllJobs(WhereClauses) returns (AllJobResponses);
}

service ApplicationService {
    rpc ApplyApplication(ApplicationRequest) returns (ApplicationResponse);
    rpc GetAllApplications(WhereClauses) returns (AllApplicationResponses);
    rpc GetApplicationById(IdRequest) returns (ApplicationResponse);
}